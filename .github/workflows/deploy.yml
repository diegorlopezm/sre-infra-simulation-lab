name: üöÄ SRE Lab CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  validate-configs:
    name: üîß Validate Configurations
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üê≥ Validate Docker Compose
      run: |
        echo "Validating Docker Compose configurations..."
        if ! docker compose -f infrastructure/web-apps/docker-compose.yml config -q; then
          echo "‚ùå ERROR: web-apps/docker-compose.yml has syntax errors"
          exit 1
        fi
        
        if ! docker compose -f infrastructure/automation/docker-compose.yml config -q; then
          echo "‚ùå ERROR: automation/docker-compose.yml has syntax errors"  
          exit 1
        fi
        echo "‚úÖ All Docker configurations are valid"
        
    - name: ü§ñ Validate Ansible Syntax
      run: |
        cd infrastructure/automation/ansible/provisioning
        if ! ansible-playbook --syntax-check deploy-infra.yml; then
          echo "‚ùå ERROR: deploy-infra.yml has syntax errors"
          exit 1
        fi
        
        if ! ansible-playbook --syntax-check teardown-infra.yml; then
          echo "‚ùå ERROR: teardown-infra.yml has syntax errors"
          exit 1  
        fi
        echo "‚úÖ All Ansible playbooks are syntactically correct"

    # ‚úÖ NOTIFICACI√ìN DE INICIO
    - name: üöÄ Notify Slack - Pipeline Started
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'C09N7P0EJ3T'
        slack-message: |
          üöÄ *Pipeline Started*: SRE Lab CI/CD
          ‚Ä¢ *Repository*: ${{ github.repository }}
          ‚Ä¢ *Branch*: ${{ github.ref_name }}
          ‚Ä¢ *Triggered by*: ${{ github.actor }}
          ‚Ä¢ *Commit*: ${{ github.sha | slice: 0, 8 }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  infrastructure-test:
    name: üß™ Infrastructure Tests
    runs-on: ubuntu-latest
    needs: validate-configs
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üìä Service Discovery Test
      run: |
        echo "Testing service discovery configuration..."
        if ! grep -r "traefik.http.routers" infrastructure/ > /dev/null; then
          echo "‚ùå ERROR: No Traefik router labels found in infrastructure/"
          exit 1
        fi
        echo "‚úÖ Traefik labels configuration validated"
        
    - name: üîó Network Configuration Test
      run: |
        echo "Validating network configurations..."
        if ! grep -r "web-apps_default" infrastructure/ > /dev/null; then
          echo "‚ùå ERROR: No services found using web-apps_default network"
          exit 1
        fi
        echo "‚úÖ Network configurations validated"

  quality-gate:
    name: ‚úÖ Quality Gate
    runs-on: ubuntu-latest
    needs: [validate-configs, infrastructure-test]
    if: always()
    
    steps:
    - name: üìà Generate Quality Report
      run: |
        echo "üöÄ SRE Infrastructure Lab - Quality Report" > quality-report.md
        echo "===========================================" >> quality-report.md
        echo "üìÖ Generated: $(date)" >> quality-report.md
        echo "üåê Live Demo: https://blog.diegoricardo.dev" >> quality-report.md
        echo "" >> quality-report.md
        echo "## üìä Pipeline Status" >> quality-report.md
        echo "- ‚úÖ Validate Configurations: ${{ needs.validate-configs.result }}" >> quality-report.md
        echo "- ‚úÖ Infrastructure Tests: ${{ needs.infrastructure-test.result }}" >> quality-report.md
        echo "" >> quality-report.md
        echo "## üîç Quick Links" >> quality-report.md  
        echo "- [üìñ GitHub Repository](https://github.com/${{ github.repository }})" >> quality-report.md
        echo "- [üéØ Live Load Balancing Demo](https://blog.diegoricardo.dev)" >> quality-report.md
        echo "- üìä Grafana Dashboard: https://grafana.diegoricardo.dev" >> quality-report.md
        
        cat quality-report.md

    # ‚úÖ NOTIFICACI√ìN FINAL
    - name: üì¢ Notify Slack - Final Status
      if: always()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'C09N7P0EJ3T'
        slack-message: |
          ${{ job.status == 'success' && '‚úÖ' || '‚ùå' }} *Pipeline Finished*: SRE Lab CI/CD
          ‚Ä¢ *Repository*: ${{ github.repository }}
          ‚Ä¢ *Branch*: ${{ github.ref_name }}
          ‚Ä¢ *Overall Status*: ${{ job.status }}
          ‚Ä¢ *Validate Configs*: ${{ needs.validate-configs.result }}
          ‚Ä¢ *Infra Tests*: ${{ needs.infrastructure-test.result }}
          ‚Ä¢ *View Results*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # üö® NOTIFICACI√ìN DE FALLOS CR√çTICOS (OPCIONAL)
  critical-failure:
    name: üö® Critical Failure Alert
    runs-on: ubuntu-latest
    needs: [validate-configs, infrastructure-test, quality-gate]
    if: failure()  # Solo se ejecuta si hay fallos
    
    steps:
    - name: üö® Notify Slack - Critical Failure
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'C09N7P0EJ3T'
        slack-message: |
          üö® *CRITICAL FAILURE*: SRE Lab CI/CD Pipeline
          ‚Ä¢ *Repository*: ${{ github.repository }}
          ‚Ä¢ *Branch*: ${{ github.ref_name }}
          ‚Ä¢ *Failed Jobs*: 
          ${{ join(needs.*.result, ', ') }}
          ‚Ä¢ *View Failed Run*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ‚Ä¢ *Commit*: ${{ github.sha }}
          ¬°Revisa los logs para m√°s detalles!
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}